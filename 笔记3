1.类型转换时会产生临时变量，而临时变量具有常性。所以对于临时变量，使用引用(&)时,需要加上const
2.权限可以"平移"，能缩小，但不能放大
3.强制类型转换的细节：
int i = 97;
char ch = 'a';
if (i == ch)
cout << "相等" << endl;
//ch不变，但比较时类型会转换，然后会产生临时变量
//临时变量为int，并将ch的数据以int型获取，然后整型提升(按 最高位/符号位 补全数据)


一.类的6个默认成员函数


二.析构顺序：
规则:后定义先析构
根据生命周期析构顺序：局部非静态对象--->局部静态对象----->全局对象(静态+非静态)

三.拷贝构造函数 
1.特征：
(1)拷贝构造是函数重载的特殊形式,它是一种特殊的构造函数，同样也是默认成员函数
(2)参数只有一个且必须是类类型对象的引用，使用传值方式编译器直接报错(会引发无穷递归调用)。
(3)若未显式定义，编译器会自动生成且对内置类型处理。默认的拷贝构造函数对象(内置类型成员)按内存存储按字节序完成拷贝，这种拷贝叫做浅拷贝，或者值拷贝。自定义类型成员调用它的构造函数
(4)其形参必须是引用(也可用指针)，但并不限制为const，一般普遍的会加上const限制。(形参若是值，很可能无限递归)
2.深拷贝：
(1)诞生原因：若使用拷贝构造函数，同一块空间的地址会被多个变量获取，多个变量会重复在此处释放空间，因此有深拷贝
(2)作用：额外开辟空间(按原先空间大小)，并将数据拷贝(按原先数据总大小)到新空间(避免此处空间被连续多次释放)

Data(const Data& d)//使用const，避免原先数据被改。如错误1
{
    this->_year=d._year;
    //错误1 ,原因：反向拷贝，将保存的数据改为【应被赋值的数据】
    d._year=this->_year;
}
四.关键字：operator
1.功能：运算符重载，operator+运算符 做函数名。增强代码的可读性
2.格式：
//注意优先级，加括号
格式1
cout << operator==(d1, d2) << endl;
cout << operator<(d1, d2) << endl;

格式2
cout << (d1 == d2) << endl;
cout << (d1 < d2) << endl;
3.注意事项：
(1)不能连接其他符号来创建新的操作符：operator@
(2)重载操作符必须有一个类 类型参数
(3)内置类型的运算符的含义不能改变
(4)作为类成员函数重载，形参比操作数少1，成员函数的第一个参数为隐藏this指针
