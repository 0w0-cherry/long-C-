//模拟实现库函数，但实现方式为自定义(尽量靠近)
//进阶题目：搞懂库中实现的全部方式
#include<iostream>
#include<assert.h>
using namespace std;
namespace bit

{

    class string

    {

        friend ostream& operator<<(ostream& _cout, const bit::string& s);

        friend istream& operator>>(istream& _cin, bit::string& s);

    public:

        typedef char* iterator;
        typedef const char* const_iterator;

    public:

        string(const char* str = "")
            :_size(strlen(str))
        {
            _capacity = _size;
            _str = new char[_capacity + 1];//空间+1用于存储 '\0'
            strcpy(_str, str);
        }

        string(const string& s)
        {
            _size = s._size;
            _capacity = s._capacity;
            _str = new char[_capacity + 1];
            strcpy(_str, s._str);
        }

        //string& operator=(const string& s)//s不可改
        //{
        //    //现代写法
        //    if (this != &s)
        //    {
        //        string tmp(s);
        //        swap(tmp);
        //    }
        //    return *this;

        //}
        string& operator=(string ss)//现代写法的优化，自定义类型传值传参要调用拷贝构造
        {
            swap(ss);//与拷贝的sting交换不影响原来的string
            return *this;
        }

        ~string()
        {
            delete[] _str;
            _str = nullptr;//释放空间后须置空
            _size = 0;
            _capacity = 0;
        }



            //////////////////////////////////////////////////////////////

            // iterator

        iterator begin()
        {
            return _str;
        }

        iterator end()
        {
            return _str + _size;
        }



            /////////////////////////////////////////////////////////////

            // modify

        void push_back(char ch)
        {
            //扩容2倍，须更新空间
            if (_capacity == _size)
            {
                _capacity = _capacity == 0 ? 4 : 2 * _capacity;
                reserve(_capacity);
            }
            _str[_size] = ch;
            _size++;
            _str[_size] = '\0';
        }

        string& operator+=(char c)
        {
            if (_capacity == _size)
            {
                _capacity = _capacity == 0 ? 4 : 2 * _capacity;
                reserve(_capacity);
            }
            _str[_size] = c;
            _size++;
            _str[_size] = '\0';
            return *this;
        }

        void append(const char* str)
        {
            int len = strlen(str);
            if (_size + len > _capacity)
            {
                reserve(_size + len);
                _capacity = _size + len;
            }
            strcpy(_str + _size, str);
            _size += len;

        }

        string& operator+=(const char* str)
        {
            int len = strlen(str);
            if (_size + len > _capacity)
            {
                reserve(_size + len);
                _capacity = _size + len;
            }
            strcpy(_str + _size, str);
            _size += len;
            return *this;
        }

        void clear()//数据清空时，后续数据其实仍然保留
        {
            _size = 0;
            _str[0] = '\0';
        }

        void swap(string& s)
        {
            std::swap(_str, s._str);
            std::swap(_size, s._size);
            std::swap(_capacity, s._capacity);
        }

        const char* c_str()const
        {
            return _str;
        }



        /////////////////////////////////////////////////////////////

        // capacity

        size_t size()const
        {
            return _size;
        }

        size_t capacity()const
        {
            return _capacity;
        }

        bool empty()const
        {
            return _capacity == 0;
        }

        void resize(size_t n, char c = '\0')
        {
            if (n > _size)
            {
                // 如果newSize大于底层空间大小，则需要重新开辟空间
                if (n > _capacity)
                {
                    reserve(n);
                    _capacity = n;
                }
                memset(_str + _size, c, n - _size);
            }
            _size = n;
            _str[n] = '\0';
        }

        void reserve(size_t n)
        {
            // 如果新容量大于旧容量，则开辟空间
            if (n > _capacity)
            {
                char* tmp = new char[n+1];
                strcpy(tmp, _str);
                // 释放原来旧空间,然后使用新空间
                delete[] _str;
                _str = tmp;
                _capacity = n;
            }
        }



        /////////////////////////////////////////////////////////////

        // access

        char& operator[](size_t index)
        {
            assert(index < _size);
            return _str[index];
        }

        const char& operator[](size_t index)const
        {
            assert(index < _size);
            return _str[index];
        }



        /////////////////////////////////////////////////////////////

        //relational operators

        bool operator<(const string& s)
        {
            int ret = strcmp( _str,s._str);
            if (ret < 0)
                return true;
            return false;
        }

        bool operator<=(const string& s)
        {
            return !(*this > s);
        }

        bool operator>(const string& s)
        {
            int ret = strcmp(_str, s._str);
            if (ret)
                return true;
            return false;
        }

        bool operator>=(const string& s)
        {
            return !(*this < s);
        }

        bool operator==(const string& s)
        {
            int ret = strcmp(_str, s._str);
            if (ret == 0)
                return true;
            return false;

        }

        bool operator!=(const string& s)
        {
            return !(*this == s);
        }



        // 返回c在string中从pos位置开始第一次出现的位置

        size_t find(char c, size_t pos = 0) const
        {
            for (int i = pos; i < _size; i++)
            {
                if (_str[i] == c)
                    return i;
            }
            return -1;
        }

        // 返回子串s在string中从pos位置开始第一次出现的位置

        size_t find(const char* s, size_t pos = 0) const
        {
            assert(s);
            assert(pos < _size);
            char* src = _str + pos;
            while (*src)
            {
                const char* a = src;//如果不匹配，返回子串起始处重新查找
                const char* b = s ;
                while (*a == *b && *b)//逐一核对且未到末尾
                {
                    a++;
                    b++;
                }
                if (*b == '\0')//全部核对完毕，找到子串
                    return src - _str;//返回下标
                else
                    src++;
            }
            return -1;//未找到
        }

        // 在pos位置上插入字符c/字符串str，并返回该字符的位置

        string& insert(size_t pos, char c)
        {
            assert(pos < _size);
            //扩容
            if (_capacity <= _size)
            {
                char* tmp = new char[_capacity * 2 + 1];
                strcpy(tmp, _str);
                delete[] _str;
                _str = tmp;
                _capacity *= 2;
            }

            //数据后移
            for (int i = _size+1/*为了把'\0'算在内*/; i >(int)pos; i--)//此处应尽量避免类型提升(pos为size_t, 小范围转大范围)
            {
                _str[i] = _str[i - 1];
            }
            _str[pos] = c;
            _size++;
            return *this;

        }

        string& insert(size_t pos, const char* str)//此处应尽量避免类型提升(pos为size_t,小范围转大范围)
        {
            assert(pos < _size);
            int len = strlen(str);
            //扩容
            if (_size+len > _capacity)
            {
                char* tmp = new char[_size+len+1];
                strcpy(tmp, _str);
                delete[] _str;
                _capacity = _size + len + 1;
                _str = tmp;
            }

            //后移数据
            for (int i = _size ; i >= (int)pos; i--)//此处应尽量避免类型提升(小范围转大范围)
            {
                _str[i+len] = _str[i];
            }

            //注意拷贝子串
            while (*str != '\0')
            {
                _str[pos++] = *str++;
            }
            _size+=len;
            return *this;
        }



        // 删除pos位置上的元素，并返回该元素的下一个位置

        string& erase(size_t pos, size_t len)
        {
            assert(pos < _size);
            if (pos + len >= _size)//pos位置后全删
            {
                _str[pos] = '\0';
                _size = pos;
            }
            else
            {
                strcpy(_str + pos, _str + pos + len);
            }
            return *this;
            
        }

    private:

        char* _str;

        size_t _capacity;

        size_t _size;

    };

    void test1()
    {
        string s1("hello a");
        string s2;
        cout << s1.c_str() << endl;
        cout << s2.c_str() << endl;
        for (int i = 0; i < s1.size(); i++)
        {
            s1[i]++;
        }
        for (int i = 0; i < s1.size(); i++)
        {
            cout << s1[i] << " ";
        }
        cout << endl;
    }
    void test2()
    {
        //非const对象
        string s1("hello a");
        string::iterator it1 = s1.begin();
        while (it1 != s1.end())
        {
            cout << *it1++ << " ";
        }
        cout << endl;
        for (auto e : s1)
        {
            cout << e << " ";
        }
        cout << endl;

        //const对象
        string s3("hello a");
        string::const_iterator it3 = s1.begin();
        while (it3 != s1.end())
        {
            cout << *it3++ << " ";
        }

    }
    void test_string3()
    {
        string s3("helloaa");
        s3.push_back('1');
        s3.push_back('2');
        cout << s3.c_str() << endl;

        s3 += "yyyy";
        s3.append("xxx");
        s3 += 'x';
        cout << s3.c_str() << endl;
    }
    void test4()
    {
        string s4("hello world");
        s4.erase(5, 3);
        cout << s4.c_str() << endl;
        s4.resize(3);
        s4.resize(20, 'x');
        cout << s4.c_str() << endl;

        string s5 = s4;
        cout << s4.c_str() << endl;
    }
    void test6()
    {
        string s1("hello");
        s1.insert(3, 'x');
        s1.insert(4, "xxxx");
        cout << s1.c_str() << endl;
    }

    void test7()
    {
        string s1("hello");
        string s2("aaaaa");
        cout << (s1 > s2) << endl;
        cout << (s1 >= s2) << endl;
        cout << (s1 < s2) << endl;
        cout << (s1 <= s2) << endl;
        cout << (s1 != s2) << endl;
        cout << (s1 == s2) << endl;
    }
    void test8()
    {
        string s1("hello");
        cout << s1.find('e', 1)<<endl;
        cout<<s1.find('el', 1)<<endl;
    }
}

ostream& bit::operator<<(ostream& _cout, const bit::string& s)
{
    for (int i = 0; i < s._size; i++)
    {
        _cout << s[i];
    }
    return _cout;
}
istream& bit::operator>>(istream& _cin, bit::string& s)
{
    s.clear();
    char ch;
    ch = _cin.get();
    char buff[128];
    size_t i = 0;
    while (ch != ' ' && ch != '\n')
    {
        buff[i++] = ch;
        if (i == 127)
        {
            buff[127] = '\0';
            break;
        }
        ch = _cin.get();
    }
    s += buff;
    return _cin;

}

//测试用例
#define _CRT_SECURE_NO_WARNINGS 1
#include"标头.h"

int main()
{
	//bit::test1();
	//bit::test2();
	//bit::test_string3();
	//bit::test4();
	//bit::test6();
	//bit::test7();
	//bit::test8();
	//cout << "1";
	string ans;
	cin >> ans;
	cout << ans;
	return 0;
}
