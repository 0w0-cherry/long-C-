#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
#include<bits/stdc++.h>
#include<string>
using namespace std;

void test_string9()
{
	string s1("hello world");
	string filename("test.cpp");
	FILE* fout = fopen(filename.c_str(), "r");//fopen需要C形式的字符串
}
void test_string10()
{
	string s1("file.c.tar.cpp");
	size_t pos1 = s1.find('.');//，没找到返回npos(-1)
	if (pos1 != string::npos)
	{
		string suffix = s1.substr(pos1);
		cout << suffix << endl;
	}
	else
	{
		cout << "没有后缀" << endl;
	}
	string url1("https://legacy.cplusplus.com/reference/string/string/substr/");
	string url2("zzz");
	cout << (url1 < url2) << endl;
	string x1 = "xxx";
	string x2 = "yyy";
	string ret = x1 + x2;

	cout << ret << endl;

	string uri;
	size_t i1 = url1.find(':');
	if (i1 != string::npos)
	{
		string a = url1.substr(0, i1 - 0);//[ )
		cout << a << endl;
	}
	size_t i2 = url1.find('/', i1 + 3);
	if (i2 != string::npos)
	{
		string domain = url1.substr(i1 + 3, i2 - (i1 + 3));
		cout << domain << endl;
		uri = url1.substr();
		cout << uri << endl;

	}

}



struct Person
{
private:
	int _age;
	char _address[128];
	char _tel[36];
	char _name[36];
};


int main1()
{
	//ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
		//选择排序
	int n = 5;
	int begin = 0;
	int end = n - 1;
	int a[] = { 4, 2, 5, 1, 3 };

	while (begin < end)
	{
		int min = begin;
		int max = begin;
		int flag = 0;
		for (int i = begin + 1; i <= end; i++)
		{
			if (a[i] > a[max])
			{
				max = i;
			}
			if (a[i] < a[min])
			{
				min = i;
			}
			if (max == begin)
				max = min;
		}
		swap(a[begin], a[min]);
		swap(a[end], a[max]);
		begin++;
		end--;
	}
	for (int i = 0; i <= n - 1; i++)
		cout << a[i] << " ";
	cout << "\n";
	test_string10();
	return 0;
}
int main2()
{
	string str;
	char ch;
	ch = getchar();
	while (ch != '\n')
	{
		str += ch;
		ch = getchar();
	}
	size_t pos = str.rfind(' ');
	cout << str.size() - (pos + 1) << endl;
	return 0;
}

int main3()
{
	char ch1;
	wchar_t ch2;
	char16_t ch3;
	char32_t ch4;

	cout << sizeof(ch1) << endl;
	cout << sizeof(ch2) << endl;//2
	cout << sizeof(ch3) << endl;//2
	cout << sizeof(ch4) << endl;//4

	// 编码   文字计算机的存储和表示
	// ascll

	char c1 = 'a';
	cout << c1 << endl;

	char c2 = 98;
	cout << c2 << endl;

	return 0;
}

namespace bit
{
	class string
	{
	public:
		string()
			:_str(nullptr)
			, _size(0)
			, _capacity(0)
		{}

		string(const char* str)
			//:_str(str)//原字符串可能是常量字符串，权限会被扩大，除非加const
			//因此拷贝原字符串到新开辟的空间

			//顺序颠倒，str还没开辟，但已计算其size
			//:_size(strlen(str))
			//:_str(new char[_size + 1])

			:_str(new char[strlen(str) + 1])
			, _size(strlen(str))
			, _capacity(strlen(str))
		{
			strcpy(_str, str);
		}
		string(const char* str=nullptr)
			:_size(strlen(str))
		{
			_capacity = _size;
			_str = new char[_capacity + 1];
			strcpy(_str, str);
		}
	private:
		char* _str;
		size_t _size;
		size_t _capacity;
	};

	void test_string1()
	{
		string s1("hello world");
	}
};


int main()
{
	string str;
	getline(cin, str);
	size_t a = str.rfind(' ');
	cout << str.size() - (a + 1) << endl;
	return 0;
}
