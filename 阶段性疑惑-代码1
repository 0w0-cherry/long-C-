题目1：返回常引用
const int& a(int& x)
{
        return x;
}
int main()
{
    int n = 10;
    //传参时传入n的拷贝
        //返回常量(即拷贝的n的值)的引用，由int c接收，并改变其生命周期
    int c = a(n);
    return 0; 
}
题目二：内部类访问外部类的方式
1.内部类的特点：内部类可以直接访问外部类的成员(成员变量和成员方法)，包括私有成员。
2.调用外部类的成员：需要用对象或者类的实例话指针调用(静态的成员内部类,只能访问外部类的静态成员)
class A
{
public:
    int f(int a = 2)
    {
        return a;
    }
    class B
    {
    public:
        B(A* c)//指向对象的指针实例化：添加构造函数接收A，令类B能调用A的实例。
            :parent(c)//初始化parent
        {
            int n = 10;
        }
        B(A x)//对象实例化：添加构造函数接收A，令类B能调用A的实例
        {}//由于A不能被存储(否则类嵌套)，所以在不使用指针的情况只能在当前的构造函数内调用类A的成员
        void func(int p = 10)
        {
            if (parent)
                int p = parent->f(10);//通过指针调用A的成员函数
            int n = 1;
        }
    private:
        A* parent;// 用于存储 A 的实例的指针
        //A x;//不能嵌套，否则sizeof无法计算
    };
    int a;
};
int main()
{
    A a;
    A::B b(&a);
    b.func();

    A::B c(a);
    c.func();
    return 0;
}
题目三：内部类的划分
1.成员内部类: 定义在外部类的成员位置。
2.局部内部类: 定义在外部类的局部位置，也就是外部类中的方法内部。

题目四：const类对象只能调用const成员函数
1.const 关键字用于表示不可变性
2.应用于类成员函数时，const 表示该函数不会改变对象的状态，即不会修改任何成员变量的值。这样的成员函数被称为 const 成员函数
3.一个 const 类对象是指被声明为 const 的类实例。对于这样的对象，其成员变量的值不能被修改。

题目五:静态成员变量和静态成员函数的使用规则
1.静态成员变量：在类内声明(static修饰后，变为类级别的成员，先于该类任何对象的存在而存在，它被该类所有的对象共享) 类外定义初始化， 类外初始化的时候， 不能加static
2.静态成员函数：没有 this指针，只能访问静态成员
3.静态成员函数与普通成员函数的根本区别在于：普通成员函数有 this 指针，可以访问类中的任意成员；而静态成员函数没有 this 指针，只能访问静态成员（包括静态成员变量和静态成员函数）。
class MyClass {
public:
    MyClass() { }  // 空构造函数
    // 静态成员变量：类内声明，类外定义(static修饰后被类的所有的对象共享)
    static int count;
    // 静态成员函数
    static int getCount() {
        return count;
};
// 在类外部定义和初始化静态成员变量
int MyClass::count = 0;

题目五：假设 AA 是一个类， AA* abc () const 是该类的一个成员函数的原型。那 AA* abc () const的含义是什么？
1.类AA中的 无参/缺省 函数的指针，原函数被const修饰，原函数不能修改类的任何成员变量

题目六：缺省参数放在声明，因为传参在声明阶段处理。声明阶段指的是编译阶段

题目七：使用函数模板：cout << Add(a, y) << endl;//a(int),y(double)存在歧义，属于哪类错误？
