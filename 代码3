void func(int& x)
{

}
int main20()
{
	//权限缩小.可以
	const int a = 0;
	//错误原因：权限被放大(不行)， a被const修饰
	//int& b = a;
	//int& z = b;
	const int& b = a;
	
	//权限被放大
	//int& z1 = 10;
	const int& z = 10;

	//int& n = a + z;
	const int& m = a + z;//a+z表达式的返回值是临时变量，临时变量具有常性


	int i = 97;
	char ch = 'a';
	//ch不变，但比较时类型会转换，然后会产生临时变量
	//临时变量为int，并将ch的数据以int型获取，然后整型提升(按 最高位/符号位 补全数据)
	if (i == ch)
		cout << "相等" << endl;
	return 0;
}

class Date
{
public:
	Date(int year = 1900, int month = 1, int day = 1)
	{
		_year = year;
		_month = month;
		_day = day;
	}
	int Get()//用于获取没被公开的成员变量
	{
		return _year;
	}
	bool operator==( const Date& y)
	{

		return _year == y._year
			&& _month == y._month
			&& _day == y._day;
	}

	bool operator<( const Date& y)
	{
		if (_year == y._year && _month == y._month && _day < y._day)
			return 1;
		if (_year < y._year)
			return 1;
		if (_year == y._year && _month < y._month)
			return 1;

		return 0;
	}
	//private://后面要外界访问成员变量，必须手动设为公有
	int _year;
	int _month;
	int _day;
};

//引用，可避免调用拷贝构造
//关键字，运算符重载。operator+运算符做函数名
//bool operator==(const Date& x, const Date& y)
//{
//
//	return x._year == y._year
//		&& x._month == y._month
//		&& x._day == y._day;
//}
//
//bool operator<(const Date& x, const Date& y)
//{
//	if(x._year==y._year && x._month==y._month && x._day<y._day)
//		return 1;
//	if (x._year < y._year )
//		return 1;
//	if (x._year == y._year && x._month < y._month)
//		return 1;
//
//	return 0;
//}

int main()
{
	Date d1(2024, 1, 28);
	Date d2(2024, 2, 27);

	cout << d1.operator==(d2) << endl;
	cout << d1.operator<(d2) << endl;

	//cout << operator==(d1, d2) << endl;
	//cout << operator<(d1, d2) << endl;


	//注意优先级
	cout << (d1 == d2) << endl; // cout << (operator==(d1, d2)) << endl;
	cout << (d1 < d2) << endl;
	int a = 10;

	return 0;
}
