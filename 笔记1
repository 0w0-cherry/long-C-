一.const
1.编译器无法直接得到const成员初始值，因此无法进入符号表成为真正意义上的常量
2.类对象的 “改变” 定义：改变任何成员变量的值，调用任何非const成员函数
3.const指针       ：一个指针本身经过 const 修饰，自身内容（指针指向）不应该发生改变。
4.const成员函数：此函数不应该修改任何成员变量
5.const变量       ：不能修改值，因此必须初始化

1.为什么要在内存中划分不同的区域？方便管理不同类型的数据

二.内存区域划分


三.new用法的功能：
1.用法简介
2.控制初始化
3.自定义类型，开空间+构造函数
4.new失败了以后抛异常，不需要手动检查
struct ListNode
{
        ListNode* _next;
    ListNode* _prev;
    int _val;
    ListNode(int val)
        :_next(nullptr)
        , _prev(nullptr)
        , _val(val)
    {}
};
int* p1 = new int;//创建1个int对象
int* p2 = new int[10]; // new 10个int对象

int* p3 = new int(10); // new 1个int对象,初始化成10
int* p4 = new int[10]{ 1,2,3,4,5 };//10个int对象，5个初始化，5个默认初始化

ListNode* node1 = new ListNode(5);//自定义类型，开空间+构造函数。
ListNode* list1 = CreatList(5);//创建列表及结点数
