1.namespace:命名空间(可嵌套，一般不全展开)
2.头文件包含细节：若头文件中包含函数的定义，容易造成重名定义(定义冲突)
2.域作用限定符"::"(左边不给是全局域)：影响编译器的搜索规则,但在访问时，仍然采用就近原则
3.%c读取单个字符，%s遇见空格则结束


一.缺省参数：
1.若不给参数，自动赋值(不能跳跃传参)
2.参数放在声明(原因参考"头文件包含细节"，且传参是在声明阶段处理)
3.缺省值必须是 常量/全局变量
4.半缺省：缺省从右往左必须连续给值，实参从左往右传入
5.应用场景：扩容等


二.同名重载：
1.作用：允许同名函数存，它们的参数必须不同
1.同名函数的参数的不同：
(1)参数类型
(2)参数个数
(3)参数顺序(本质仍是类型不同)
2.C不允许，但C++允许同名函数存在
(1)C不支持重载，链接时，直接用函数名找地址，有同名函数，无法区分
(2)CPP支持原因：函数名修饰规则，名字中引入参数类型，由各个编译器各自实现


三.宏
1.宏的犯错注意点：
(1)不是函数
(2)不能加分号
(3)使用括号控制优先级
2.核心：宏在预处理阶段进行替换
错误写法：
#define ADD(int a,int b) return a+b;
#define ADD(a,b) a+b;
#define ADD(a,b) (a+b)
正确写法:
define ADD(a,b) ((a)+(b))  (目的是为了防止复合表达式)

3.宏的优缺点：
优点：
(1)增强代码复用性
(2)提高性能
缺点：
(1)语法复杂，坑多，不容易控制
(2)不能调试
(3)没有类型安全的检查



四.C++关键字：auto
1.功能：可自动识别数据类型(必须初始化)q,可应用与复杂的函数类型
2.实例：
int i=0;
auto k=i;
auto p=&i;
auto* p2=&i;
auto& r=i;
//错误写法1： auto x;
//错误写法2：auto* p3=i;
//错误写法3:void func(auto x);//不能作为参数
//错误写法4:auto b[]={1,2,3};//不能用来声明数组
//注意：auto可以作为函数返回值，
             即允许：auto fun(int x);，但auto若连环嵌套会降低代码可读性

五.C++关键字：nullptr
1.功能：表示空指针,(字节数与 (void*)0 相同)
2.诞生nullptr的原因：在C++中void* 类型是不允许隐式转换成其他类型的，而(NULL在C++中被定为常数0，因此被替换)
