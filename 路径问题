https://leetcode.cn/problems/minimum-path-sum/description/
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> dp(m+1,vector<int>(n+1,INT_MAX));

        dp[0][1]=0;
        for(int i=1;i<=m;i++)
            for(int j=1;j<=n;j++)
                dp[i][j]=min(dp[i-1][j],dp[i][j-1])+grid[i-1][j-1];

        return dp[m][n];

    }
};

https://leetcode.cn/problems/minimum-falling-path-sum/
class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n=matrix.size();
        vector<vector<int>> dp(n+1,vector<int>(n+2,INT_MAX));
        for(int j=0;j<=n+1;j++)
        {
            dp[0][j]=0;
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=n;j++)
            {
                dp[i][j]=min(dp[i-1][j-1],min(dp[i-1][j],dp[i-1][j+1]) )+matrix[i-1][j-1];
            }
        }
        int ret=dp[n][1];
        for(int j=1;j<=n;j++)
        {
            ret=min(ret,dp[n][j]);
        }
        return ret;
    }
};






https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/

class Solution {
public:
    int jewelleryValue(vector<vector<int>>& frame) {
        int m=frame.size();
        int n=frame[0].size();
        vector<vector<int>> dp(m+1,vector<int> (n+1));

        dp[0][1]=0;
        dp[1][0]=0;
        for(int i=1;i<=m;i++)
        {
            for(int j=1;j<=n;j++)
            {
                dp[i][j]=max(dp[i-1][j],dp[i][j-1])+frame[i-1][j-1];
            }
        }
        return dp[m][n];
    }
};

https://leetcode.cn/problems/dungeon-game/
class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dun) {
        int m=dun.size();
        int n=dun[0].size();
        vector<vector<int>> dp(m+1,vector<int> (n+1,INT_MAX)) ;
        dp[m-1][n]=1;

        for(int i=m-1;i>=0;i--)
        {
            for(int j=n-1;j>=0;j--)
            {
                dp[i][j]=min(dp[i+1][j],dp[i][j+1])-dun[i][j];
                dp[i][j]=max(1,dp[i][j]);
            }
        }
        return dp[0][0];
    }
};
