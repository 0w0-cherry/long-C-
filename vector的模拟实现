#include<assert.h>
#include<iostream>
using namespace std;
namespace bit
{
	template<class T>
	class vector
	{
	public:
		typedef T* iterator;
		typedef const T* const_iterator;

		iterator begin() const
		{
			return _start;
		}
		iterator end() const
		{
			return _finish;
		}
		iterator begin() 
		{
			return _start;
		}
		iterator end()
		{
			return _finish;
		}
		vector()
		{
			;
		}
		vector(const vector<T>& v)
		{
			reserve(v.capacity());
			for (auto e : v)
			{
				push_back(e);
			}
		}
		~vector()
		{
			delete[] _start;
			_start = _finish = _endofstorage = nullptr;
		}
		size_t size() const
		{
			return _finish - _start;
		}
		T& operator[](size_t pos) 
		{
			assert(pos < size());
			return _start[pos];
		}
		T& operator[](size_t pos) const//它们不会修改类的成员变量，也不能调用非 const 的成员函数
		{
			assert(pos < size());
			return _start[pos];
		}
		size_t capacity() const
		{
			return _endofstorage - _start;
		}

		void reserve(size_t n)
		{
			if (n > capacity())
			{
				T* tmp = new T[n];
				memcpy(tmp, _start, sizeof(T) * size());
				size_t oldsize = size();
				delete[] _start;

				_start = tmp;
				_finish = tmp + oldsize;
				_endofstorage = tmp + n;

			}
		}

		void push_back(const T& val)//采用&避免string传值发生拷贝
		{
			//扩容
			if (_finish == _endofstorage)
			{
				size_t newcapacity = capacity() == 0 ? 4 : 2 * capacity();
				T* tmp = new T[newcapacity];
				size_t oldsize = size();
				memcpy(tmp, _start, size() * sizeof(T));
				delete[] _start;


				_start = tmp;
				_finish = tmp +oldsize;//若写在此处使用size()会因为_start的改变出问题
				_endofstorage = tmp + newcapacity;
			}
			*_finish = val;
			_finish++;
		}
		void pop_back()
		{
			//assert(empty());
			//--_finish;
			erase(--end());//
		}
		bool empty()
		{
			return _start == _finish;
		}
		void insert(iterator pos, const T& val)//细节注意：空间因扩容而更新，但pos位置没变
		{
			assert(pos >= _start && pos <= _finish);
			if (_finish == _endofstorage)
			{
				size_t len = pos - _start;
				reserve(capacity() == 0 ? 4 : 2 * capacity());
				//更新pos位置
				pos = _start + len;
			}
			iterator it = _finish-1;
			while (it >= pos)
			{
				*(it+1) = *it;
				it--;
			}
			*pos = val;
			++_finish;
		}
		void erase(iterator pos)
		{
			assert(pos >= _start && pos <= _finish);
			iterator it = pos + 1;
			while (it < _finish)//_finish指向最后一个元素的下一个元素
			{
				*(it - 1) = *it;
				it++;
			}
			_finish--;
		}

		void resize(size_t n, const T& val=T())
		{
			if (n > capacity())
			{
				//扩容
				reserve(n);
				while (_start + n > _finish)
				{
					*_finish = val;
					++_finish;
				}
			}
			else
			{
				//删除
				_finish = _start + n;//标明末尾位置，不清除数据
			}
		}

	private:
		iterator _start=nullptr;
		iterator _finish = nullptr;
		iterator _endofstorage = nullptr;
	};

	template<class T>
	void print_vector(const vector<T>& v)
	{
		for (size_t i = 0; i < v.size(); i++)
		{
			cout << v[i] << " ";
		}
		cout << endl;

		//vector<int>::iterator it1 = v.begin();//错误写法，不确定类型
		typename vector<T>::const_iterator it2 = v.begin();
		//auto it3 = v.begin();
		while (it2 != v.end())
		{
			cout << *it2 << " ";
			it2++;
		}
		cout << endl;

		for (auto e : v)
		{
			cout << e << " ";
		}
		cout << endl;
	}
	void test1()
	{
		vector<int> v;
		v.push_back(2);
		v.push_back(4);
		v.push_back(2);
		v.push_back(6);
		v.insert(v.begin(), 20);
		v.resize(20);
		print_vector(v);
		//for (size_t i = 0; i < v.size(); i++)
		//{
		//	cout << v[i] << " ";
		//}
		//cout << endl;

		//vector<int>::iterator it = v.begin();
		//while (it != v.end())
		//{
		//	cout << (*it)++ << " ";
		//}
		//cout << endl;

		//for (auto e : v)
		//{
		//	cout << e << " ";
		//}
		//cout << endl;
	}
	//void test2()
	//{
	//	int i = 1;
	//	int j = int();
	//	int k = int(2);

	//	vector<int> v1;
	//	v1.push_back(2);
	//	v1.push_back(2);
	//	v1.push_back(5);
	//	v1.push_back(4);

	//	v1.resize(10);
	//	//print_vector(v1);
	//}
}
#define _CRT_SECURE_NO_WARNINGS 1
#include"标头.h"

int main()
{
	bit::test1();
	return 0;
}
