#include<iostream>
#include<algorithm>
using namespace std;

#include<vector>
void test1()
{
	//vector<int> v;
	//v.push_back(1);
	//v.push_back(5);
	//v.push_back(1);

	vector<int> v(10, 1);

	for (int i = 0; i < v.size(); i++)
	{
		cout << v[i] << " ";
	}
	cout << endl;

	vector<int> ::iterator it= v.begin();
	while (it != v.end())
	{
		cout << *it << " ";
		it++;
	}
	cout << endl;

	for (auto e : v)
	{
		cout << e << " ";
	}
	cout << endl;
}
void test2()
{
	vector<int> v;
	v.push_back(1);
	v.push_back(1);
	v.push_back(5);
	v.push_back(1);
	for (auto e : v)
	{
		cout << e << " ";
	}
	cout << endl;

	//若find找不到，则返回最后一个元素的下一个位置(左闭右开)
	vector<int>::iterator pos0 = find(v.begin(), v.end(), 1);
	auto pos=find(v.begin(), v.end(), 1);
	if (pos != v.end())
	{
		v.insert(pos, 30);
	}
	v.insert(v.begin(), 40);//头插
	v.insert(v.begin() + 1, 0);//第二个位置插入
	v.insert(v.end(), 30);//尾插
	for (auto e : v)
	{
		cout << e << " ";
	}
	cout << endl;


	string s("abc");
	v.insert(v.begin(), s.begin(),s.end());//插入其他迭代器区间
	vector<int>::reverse_iterator rit = v.rbegin();
	while (rit != v.rend())
	{
		cout << *rit++ << " ";
	}
	cout << endl;
}

void test_vector()
{
	//对象数组
	vector<string> v;
	string s1("苹果");

	v.push_back(s1);//有名对象
	v.push_back(string("aa"));//匿名对象
	v.push_back("aa");//隐式类型转换，会构造临时对象(消耗与匿名对象相同)
}
int main()
{
	test1();
	test2();
	return 0;
}


template<class T>
class vector
{
	T* _a;
	size_t _size;
	size_t _capacity;
};
class vector<int>
{
	int* _a;
	size_t _size;
	size_t _capacity;
};

//访问第i行第j个数据
//vv.operator[](i).operator[](j);
void test0()
{
	vector<vector<int>> vv;
}

int main()
{
	return 0;
}
