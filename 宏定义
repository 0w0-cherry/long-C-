预处理时需要把所有的宏定义替换成真正的内容。

1. 宏定义的基本语法：
(1 ) 写法：#define 标识符  字符串
(2)  由于宏是直接替换，因此必须根据实际情况分析是否要加括号
(3)  实例:
#define PI 3.1415926         //定义一个常量
 
#define MULTIPLY(x, y) ((x) * (y))    //定义一个乘法操作，宏定义需要注意（）
 
#define foo(x) {x += 1; x *= 2}      //定义一个类似函数的宏，注意有分号必须加上括号

2. 在C/C++中有一些预定义的宏，可以拿来直接用，如：
__FUNTION__  获取当前函数名 
__LINE__ 获取当前代码行号 
__FILE__ 获取当前文件名 
__DATE__ 获取当前日期 
__TIME__ 获取当前时间
__STDC_VERSION__  获取当前编译器的版本

3. 优点：方便快捷，提高效率
(1)方便程序的修改，可达到修改一处，多处改变的效果。(如用宏定义定义常量)
(2)提高程序的运行效率,而又可避免函数调用(使用带参数的宏定义可以完成函数调用的功能)带来的开销。(如保留调用函数的现场和恢复调用函数的现场所带来的开销)
4.缺点：降低程序可读性，占用内存变大
(1)宏定义是通过在预处理时直接替换的，并不会检查参数是否合法，存在安全隐患。
(2)嵌套宏定义过多可能会印象程序的可读性，很容易出错，不容易调试。
(3)宏定义内容过多 且 反复频繁调用，会造成程序内存变大，运行速度变慢

5.宏常量和const常量的区别
(1)const 常量有数据类型，而宏常量没有数据类型
(2)const 常量对类型进行安全检查，宏常量只进行字符替换，且没有类型安全检查，并且在字符替换可能会产生意料不到的错误（边际效应）。

6.带参数宏定义和内联函数的区别
(1)内联函数有数据类型，可以检查参数是否合法，而带参数宏定义不会
(2)带参数宏定义是在预处理阶段展开的，而内联函数实在编译阶段展开的，但是两种都不会带来函数调用的开销。
