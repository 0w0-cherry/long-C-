https://leetcode.cn/problems/single-number/
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int a=0;
        for(auto e:nums)
        {
            a^=e;
        }
        return a;
    }
};


https://leetcode-cn.com/problems/pascals-triangle/description/
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> vv;
        vv.resize(numRows);
        for(int i=0;i<vv.size();i++)
        {
            vv[i].resize(i+1);
            vv[i][0]=vv[i][vv[i].size()-1]=1;
        }
        for(int i=0;i<vv.size();i++)
        {
            for(int j=0;j<vv[i].size();j++)
            {
                if(vv[i][j]==0)
                vv[i][j]=vv[i-1][j-1]+vv[i-1][j];
            }
        }
        return vv;
    }
};


https://leetcode.cn/problems/single-number-ii/
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        sort(nums.begin(),nums.end());

        int len=nums.size();
        if(len==1)
        return nums[0];
        if(nums[0]!=nums[1])
        return nums[0];

        if( nums[len-1] !=nums[len-2] )
        return nums[len-1];
        for(int i=1;i<=len-2;i++)
        {
            if(nums[i]!=nums[i-1] && nums[i]!=nums[i+1])
            return nums[i];
        }
        return 1;
    }
};

https://leetcode.cn/problems/single-number-iii/
class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {

        vector<int> tmp;
        sort(nums.begin(),nums.end());
        int len=nums.size();
        if(nums[0]!=nums[1])
        {
            tmp.push_back(nums[0]);
        }

        if( nums[len-1] !=nums[len-2] )
        {
            tmp.push_back(nums[len-1]);
        }
        for(int i=1;i<=len-2;i++)
        {
            if(nums[i]!=nums[i-1] && nums[i]!=nums[i+1])
            {
                tmp.push_back(nums[i]);
            }
        }
        return tmp;
    }
};


