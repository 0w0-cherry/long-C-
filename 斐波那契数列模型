
https://leetcode.cn/problems/min-cost-climbing-stairs/
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        //dp表
        //初始化
        //填表
        //返回值

        //dp[i]表示当前位置到达楼顶的最小花费
        int n=cost.size();
        vector<int> dp(n+1);
        dp[n-1]=cost[n-1],dp[n-2]=cost[n-2];
        for(int i=n-3;i>=0;i--)
        {
            dp[i]=min(dp[i+1],dp[i+2])+cost[i];
        }
        return min(dp[0],dp[1]);

        //dp[i]表示到达当前位置的最小花费
        //int n = cost.size();
        //vector<int> dp(n+1);
        //dp[0]=dp[1]=0;
        //for (int i = 2; i <= n; i++)
        //{
        //    dp[i]=min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2]);
        //}
        //return dp[n];
    }
};

https://leetcode.cn/problems/decode-ways/
class Solution {
public:
    int numDecodings(string s) {
        int n=s.size();
        vector<int> dp(n);

        //dp[0]=dp[1]=0;
        if(s[0]!='0')dp[0]+=1;
        if(n==1)
        return dp[0];

        int a=10*(s[0]-'0')+(s[1]-'0');
        if(a>=10 && a<=26)dp[1]+=1;//联合解码
        if(s[0]!='0'&&s[1]!='0')dp[1]+=1;//分别单独解码


        for(int i=2;i<=n-1;i++)
        {
            if(s[i]!='0')dp[i]+=dp[i-1];

            int b=10*(s[i-1]-'0')+(s[i]-'0');
            if(b>=10 && b<=26)dp[i]+=dp[i-2];
        }
        return dp[n-1];
    }
};

https://leetcode.cn/problems/2AoeFn/
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m+1,vector<int> (n+1));
        dp[0][1]=1;
        for(int i=1;i<=m;i++)
        {
            for(int j=1;j<=n;j++)
            {
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[m][n];
    }
};

https://leetcode.cn/problems/unique-paths-ii/
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();

        vector<vector<int>> dp(m+1,vector<int> (n+1));
        dp[0][1]=1;
        for(int i=1;i<=m;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(obstacleGrid[i-1][j-1]==0)
                {
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];
                }
            }
        }
        return dp[m][n];
    }
};
