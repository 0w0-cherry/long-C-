#include<stdlib.h>
#include<iostream>
using namespace std;
struct Stack
{
	int* a;
	int capacity;
	int size;
};
void StackInit(struct Stack* ps, int n =4);
//void StackPush(struct Stack* ps, int x);

void f(int a, char b); 
void f(char a, int b);

#include"Stack.h"

//缺省参数放在声明
void StackInit(struct Stack* ps, int n /*n=4*/)
{
	ps->a = (int*)malloc(sizeof(n));
}
//void StackPush(struct Stack* ps, int x);

void f(int a, char b)
{
	cout << "aint bchar" << endl;
}
void f(char a, int b)
{
	cout << "achar bint" << endl;

}

#include<iostream>
#include"Stack.h"
////endl,自带换行
//
////命名空间的使用方式
using namespace std;//全展开(为了方便,慎用)
using std::cout;//将命名空间中某个成员引入
//int main1()
//{
//	//加命名空间及作用域限定符
//	std:: cout << "xxx" << std::endl;
//
//
//	return 0;
//}
//
////命名空间的嵌套，避免命名空间的重复
//namespace bit
//{
//	namespace sz
//	{
//		void Push()
//		{
//			cout << "sz" << endl;
//		}
//	}
//}
//int main2()
//{
//	//嵌套的命名空间的使用
//	bit::sz::Push();
//	return 0;
//}
//
//#include<iostream>
//using namespace std;
//int main3()
//{
//	// "<<"的作用
//	//1.左移
//	int i = 10;
//	i << 1;//表达式，不改变i的值
//	i = i << 1;
//	const char* str = "hello world";
//	char ch = '\n';
//
//
//	//2.流插入,自动识别类型
//	cout << "aaaa" << i << '\n';
//	cout << "aaaa" << i << endl;
//	printf("%s%d%c", str, i, ch);
//
//
//	//">>"的作用
//	//1.右移
//	//2.流提取
//	cin >> i >> ch;
//	cout << str << i << ch << endl;
//
//	return 0;
//}

//编译阶段只有声明(编译和声明分离阶段)
//缺省参数放在声明，因为传参在声明阶段处理
// 
//缺省参数 / 默认参数(缺省值必须是常量/全局变量)
void Func(int a =10)
{
	cout << a << endl<<endl;
}
void Func1(int a = 0,int b=20)
{
	cout << a << endl;
	cout << b << endl;
}

//半缺省，缺省从右往左连续给值，实参从左往右传入
void Func4(int a,int b=10,int c=30)
{
	cout << a << endl;
	cout << b << endl;
	cout << c << endl<<endl;
}

int main4()
{
	//Func(1);
	//Func();//若不给参数，void Func(int a = 0)自动赋初值

	//Func1( 2);//不能跳跃参数传

	//对于扩容等，可采用缺省参数给初值
	Func4(1,2);


	return 0;
}

//同名重载
//C不允许，但C++允许同名函数存在，但同名函数存在时，它们的参数必须不同
//同名函数的参数的不同：
//1.参数类型
//2.参数个数
//3.参数顺序(本质仍是类型不同)

//C不支持重载，链接时，直接用函数名找地址，有同名函数，无法区分
//CPP支持原因：函数名修饰规则，名字中引入参数类型，由各个编译器各自实现
int Add(int left, int right)
{
	cout << "aaa" << endl;
	return 1;
}
int Add(double left, double right)
{
	cout << "ac" << endl;
	return 1;
}
//void f(int a, char b);
//void f(char a, int b);
int main()
{
	Add(1, 2);
	Add(1.2, 1.3);

	f(1, 'a');
	f('a', 1);
	return 0;
}
